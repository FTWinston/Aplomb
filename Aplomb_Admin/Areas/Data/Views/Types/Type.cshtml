@model Aplomb.Admin.Areas.Data.Models.TypeEditModel

@{
    ViewBag.Title = "Edit " + (Model.Type == null ? "new" : Model.Type.Name) + " entity type";
    var rowNum = 0;

    var nameProps = new Dictionary<string, object>();
    nameProps["class"] = "form-control";
    nameProps["placeholder"] = Model.TypeNameLabel;
    nameProps["aria-label"] = Model.TypeNameDescription;

    if (Model.ReadOnly)
    {
        nameProps["readonly"] = "readonly";
    }
    else
    {
        nameProps["onchange"] = "nameChanged();";
    }
}

@using (Html.BeginForm("Save", "Types", FormMethod.Post))
{

    <div class="form-group">
        <div class="input-group input-group-lg">
            @Html.TextBox("typeName", Model.Type == null ? string.Empty : Model.Type.Name, nameProps)
            @Html.Partial("NameUnique", Model.Type == null ? new Nullable<Boolean>() : true)
        </div>
        @Html.AntiForgeryToken()
        @Html.ValidationSummary()
        @if (Model.Type != null && !Model.ReadOnly)
        {
            @Html.Hidden("typeID", Model.Type.ID);
        }
    </div>
    <div class="form-group">
        <ul id="fieldList" class="list-group">
            @if (Model.Type != null)
            {
                foreach (var field in Model.Type.Fields.OrderBy(f => f.SortOrder))
                {
                    @Html.Partial("Field", new Aplomb.Admin.Areas.Data.Models.FieldEditModel(Model.ReadOnly, rowNum++.ToString(), field, Model.FieldTypes))
                }
            }
        </ul>
    </div>
    if (!Model.ReadOnly)
    {
    <div class="form-group">
        <button onclick="addFieldRow(); return false;" class="btn btn-default">@Model.AddFieldLabel</button>
        <input onclick="processFieldRows();" type="submit" value="save changes" class="btn btn-primary" />
        @Html.Hidden("rowIDs")
    </div>
    }
}

@if (!Model.ReadOnly)
{
    using (Ajax.BeginForm("AddField", null, new AjaxOptions
    {
        UpdateTargetId = "fieldList",
        InsertionMode = InsertionMode.InsertAfter,
        HttpMethod = "POST"
    }, new { id = "addFieldForm" }))
    {
        @Html.Hidden("nextRowNum", rowNum);
    }

    using (Ajax.BeginForm("CheckName", null, new AjaxOptions
    {
        UpdateTargetId = "nameUnique",
        InsertionMode = InsertionMode.ReplaceWith,
        HttpMethod = "POST"
    }, new { id = "nameChangeForm" }))
    {
        @Html.Hidden("existingTypeID", Model.Type == null ? -1 : Model.Type.ID);
        @Html.Hidden("checkTypeName", "");
    }
}

@section scripts{
    <script type="text/javascript">
        function addFieldRow() {
            $('#addFieldForm').submit();

            var rowNum = parseInt($('#nextRowNum').val());
            $('#nextRowNum').val(rowNum + 1);
        }

        function removeRow(row) {
            $(row).closest('li.list-group-item').slideUp('fast', function () { $(this).remove(); });
        }

        function nameChanged() {
            $('#checkTypeName').val($('#typeName').val());
            $('#nameChangeForm').submit();
        }

        function processFieldRows() {
            var IDs = '';
            $('#fieldList input.fieldSortOrder').each(function (index) {
                var order = $(this);
                order.val(index + 1);

                IDs += order.attr('id').replace('sortorder_', ',');
            });

            if (IDs.length > 0)
                IDs = IDs.substr(1);

            $('#rowIDs').val(IDs);
        }

        Sortable.create(document.getElementById('fieldList'), {
            handle: '.glyphicon-sort',
            animation: 150
        });
    </script>
}
